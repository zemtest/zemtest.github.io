---
layout: entry
title: "컴시설 구두시험 대비"
author: 이제언
date: 2017-06-16 13:25 +0900
tags: 컴퓨터시스템설계실험, 구두시험, 시험, 기말고사
comments: true
--- 

* table of contents
{:toc}

# 좋은 SRC(Software Requirement Spec.)의 조건

* 명확성  
	* 모호하지 않아야 한다.
* 완전성  
	* 모든 요구사항이 기술되어야 한다.
* 일관성
	* 서로 상충되는 요구사항이 없어야 한다.
* 검증 가능성
	* 객관적으로 검증할 수 있도록 구체적이어야 한다.
* 구현 가능성
	* 가용한 기술, 일정, 비용으로 구현 가능해야 한다.

# 요구사항 명세

![요구사항 명세](https://zemalee.github.io/images/SH/01_요구사항.png)

# Usecase Diagram

* 액터  
	시스템과 상호작용을 하는 시스템 외부의 존재  
	사람, 시스템, 장치를 포함.  
	역할을 기술해야함(사람O vs 홍길동X)
	* Primary Actor  
		유스케이스를 직접 사용하는, 호출하는 액터  
		반드시 존재해야 함.  
		**화살표가 시작하는 액터**

	* Secondary Actor  
		실행 결과를 전달받거나 영향을 받는 액터


* 유스케이스  
	개발 대상이 되는 시스템이 제공하는 **사용자 관점**의 개별적인 기능

* Include 관계  
	반드시 선행되어야 하는 관계.
	  
* Extend 관계  
	특정 조건에서 여러 형태로 분류될 경우에 사용하는 관계  
	중복적으로 사용되지 않음.  
	특정 조건에 의해 수행됨을 의미.(화살표 거꾸로인거 참고)

# 클래스 분석

각 유스케이스에 대한 명세서를 바탕으로 분석 수준의 클래스 모델을 작성.  
**기능적 요구사항**만을 고려.  
요구사항을 객체지향 컨셉으로 변경하는 것.  

## 클래스 사이의 관계  

![클래스 관계](https://zemalee.github.io/images/SH/02_class_relation.png)

* Association  
	두 클래스 사이에 관련성이 있다.  
	메세지 전달의 통로 역할.  

* Dependency  
	(A->B) : B의 변경이 A에 영향을 미칠 수 있다.  
	메세지 전달의 통로 역할.  

* Composition & Aggregation  
	포함관계, 집합관계, has-a를 표현.  
	Composition은 한 쪽이 독립적으로 존재할 수 없고  
	Aggregation은 독립적으로 존재할 수 있다.


## 분석 클래스의 종류

### 경계 클래스(Boundary)

시스템과 외부 액터와의 상호작용을 전담하는 클래스  
입력과 출력을 담당  
(UI\_사용자 / SI\_시스템 / DI\_장치)로 구분 가능  

* UI class 참고사항  
![클래스 관계](https://zemalee.github.io/images/SH/03_UI_class_참고사항.png)

### 제어 클래스(Control)  

시스템이 실제로 제공하는 비즈니스 로직 및 제어로직을 전담  
[뭐시기]Controller 의 이름을 주로 가진다.

### 엔티티 클래스(Entity)

유지해야 하는 데이터.  
프로그램이 종료되어도 값이 유지되어야 하는 데이터.

# Sequence Diagram

객체간 동적 상호관계를 **시간 순서**에 따라 정의  
객체간 주고 받는 메세지의 교환을 모델화  

객체를 표현할 때, Object1 : Class1 라고 명명하는데,  
이는 {객체명} : {클래스명}을 의미한다.  

## Fragment 종류

* Alt : 조건에 따라 선택사항이 여러개 인 경우  
* Opt : 조건에 따라 흐름이 하나인 경우  
* Loop : 특정 메시지 흐름을 반복해서 수행하는 경우  
* Break : Loop를 벗어날 경우  
* Par : 병렬로 수행하는 경우

*Question*  
* if - else if - else 를 나타내기 위해서는?  **Alt**  
(여러개 중 하나는 반드시 실행된다!)  

* if 를 나타내기 위해서는? **Opt**  
(실행 될 수도 있고 건너뛸 수도 있다)

# Deployment Diagram

시스템의 물리적 측면을 모델링  
비기능 요구사항 中 제약 사항 부분과 관련.  

## 구성 요소

### Nodes  

* 그냥 Node  
	처리 능력을 가진 장치(직육면체)  
* \<<device\>> 
	하드웨어를 뜻함
* \<<executionEnviroment\>>  
	플랫폼 소프트웨어. OS, DB 서버 등.  
	하드웨어상에서 동작함(device 내부에 존재)  

### 기타 내부사항?

* Artifact  
	하드웨어에서 동작하는 Software  
	소프트웨어에 의해 동작되는 물리적 파일로 나타냄
* Component  
	독립적으로 배포, 교체, 재사용 가능한 SW.  
	보통, 실행 모듈을 가리킨다.

#### 자주 쓰이는 관계

* Artifact -> Component로의 연결  
	"구현하다", "실행한다"는 뜻( ~= Implement )  

* Artifact ---> ExecutionEnv로의 연결  
	"배치한다" 배포한다" "서버에 올린다"

# 상세 설계  

쉽게 생각하면 코드수준으로 표현하는 것.

boundary(UI) : \<<page, ui>> 등 
control = control  
entity = DAO + VO  
boundary(system) : \<<subsystem\>>

*Subsystem의 목적*  
낮은 결합도  
높은 이식성  
변화에 영향을 적게 받음

*Subsystem 표현법*  
![Subsystem 표현 예시](https://zemalee.github.io/images/SH/04_subsystem.png)  

interface로 use를 사용한 후, subsystem에서 general?로 연결.

*DAO와 VO의 차이*  
DAO는 데이터에 접근하기 위한 인터페이스 제공 component  
VO는 DB Record라고 생각하면 됨.(메소드는 겟/셋만 허용)  

